package lotr.common.speech;

import lotr.common.speech.condition.*;
import lotr.curuquesta.SpeechbankEngine;
import lotr.curuquesta.condition.*;
import lotr.curuquesta.replaceablevar.ReplaceableSpeechVariable;

public class LOTRSpeechbankEngine {
	public static final SpeechbankEngine INSTANCE = createEngine();
	public static final SpeechbankContextSerializer SERIALIZER;

	static {
		SERIALIZER = new SpeechbankContextSerializer(INSTANCE);
	}

	private static SpeechbankEngine createEngine() {
		return SpeechbankEngine.createInstance().registerCondition(EnumSpeechbankCondition.enumWithComparableExpressions("day_or_night", SpeechEnums.DayOrNight.values(), context -> (((NPCSpeechbankContext) context).getWorld().isDay() ? SpeechEnums.DayOrNight.DAY : SpeechEnums.DayOrNight.NIGHT))).registerCondition(new EnumSpeechbankCondition("daytime", SpeechEnums.Daytime.values(), context -> SpeechEnums.Daytime.getDaytime(((NPCSpeechbankContext) context).getWorld()))).registerCondition(new FloatRangeSpeechbankCondition("daytime_phase", context -> SpeechEnums.Daytime.getDaytimePhase(((NPCSpeechbankContext) context).getWorld()), 0.0F, 1.0F)).registerCondition(new FloatRangeSpeechbankCondition("hour", context -> SpeechEnums.Daytime.getHour(((NPCSpeechbankContext) context).getWorld()), 0.0F, 24.0F)).registerCondition(new EnumSpeechbankCondition("weather", SpeechEnums.Weather.values(), context -> SpeechEnums.Weather.getWeather(((NPCSpeechbankContext) context).getWorld(), ((NPCSpeechbankContext) context).getNPCBiome(), ((NPCSpeechbankContext) context).getNPCPosition()))).registerCondition(new BooleanSpeechbankCondition("thunder", context -> SpeechEnums.Weather.isThundering(((NPCSpeechbankContext) context).getWorld()))).registerCondition(EnumSpeechbankCondition.enumWithComparableExpressions("moon_phase", SpeechEnums.MoonPhase.values(), context -> SpeechEnums.MoonPhase.getPhase(((NPCSpeechbankContext) context).getWorld()))).registerCondition(new BooleanSpeechbankCondition("lunar_eclipse", hummel -> ((NPCSpeechbankContext) hummel).isLunarEclipse())).registerCondition(new FloatSpeechbankCondition("align", hummel -> ((NPCSpeechbankContext) hummel).getPlayerAlignmentWithNPCFaction())).registerCondition(new RankSpeechbankCondition("rank", hummel -> ((NPCSpeechbankContext) hummel).getPlayerRankWithNPCFaction())).registerCondition(new EnumSpeechbankCondition("relation", SpeechEnums.Relation.values(), context -> (((NPCSpeechbankContext) context).getNPC().isFriendlyAndAligned(((NPCSpeechbankContext) context).getPlayer()) ? SpeechEnums.Relation.FRIENDLY : SpeechEnums.Relation.HOSTILE))).registerCondition(new NullableResourceLocationSpeechbankCondition("pledge", hummel -> ((NPCSpeechbankContext) hummel).getPledgeFactionName())).registerCondition(new EnumSpeechbankCondition("pledge_relation", SpeechEnums.PledgeRelation.values(), hummel -> ((NPCSpeechbankContext) hummel).getPledgeFactionRelation())).registerCondition(new EnumSpeechbankCondition("player_gender_pref", SpeechEnums.PreferredGender.values(), context -> SpeechEnums.PreferredGender.fromRankGender(((NPCSpeechbankContext) context).getPreferredRankGender()))).registerCondition(new EnumSpeechbankCondition("gender", SpeechEnums.PreferredGender.values(), context -> SpeechEnums.PreferredGender.fromNPCGender(((NPCSpeechbankContext) context).getNPC()))).registerCondition(new BooleanSpeechbankCondition("can_trade", context -> ((NPCSpeechbankContext) context).getNPC().canTrade(((NPCSpeechbankContext) context).getPlayer()))).registerCondition(new BooleanSpeechbankCondition("in_combat", context -> (((NPCSpeechbankContext) context).getNPC().getTarget() != null))).registerCondition(new EnumSpeechbankCondition("in_conversation", SpeechEnums.InConversation.values(), context -> SpeechEnums.InConversation.getInConversationType(((NPCSpeechbankContext) context).getNPC(), ((NPCSpeechbankContext) context).getPlayer()))).registerCondition(new BooleanSpeechbankCondition("stargazing", context -> ((NPCSpeechbankContext) context).getNPC().isStargazing())).registerCondition(new BooleanSpeechbankCondition("sun_admiring", context -> ((NPCSpeechbankContext) context).getNPC().isWatchingSunriseOrSunset())).registerCondition(new BooleanSpeechbankCondition("fleeing", context -> ((NPCSpeechbankContext) context).getNPC().isFleeing())).registerCondition(new BiomeSpeechbankCondition("biome", hummel -> ((NPCSpeechbankContext) hummel).getNPCBiomeWithTags())).registerCondition(new BooleanSpeechbankCondition("underground", hummel -> ((NPCSpeechbankContext) hummel).isUnderground())).registerCondition(new BooleanSpeechbankCondition("drunk", hummel -> ((NPCSpeechbankContext) hummel).isNPCDrunk())).registerCondition(new BooleanSpeechbankCondition("player_drunk", hummel -> ((NPCSpeechbankContext) hummel).isPlayerDrunk())).registerCondition(new EnumSpeechbankCondition("hired", SpeechEnums.Hired.values(), context -> SpeechEnums.Hired.NONE)).registerCondition(new BooleanSpeechbankCondition("mounted", context -> (((NPCSpeechbankContext) context).getNPC().getVehicle() != null))).registerCondition(new BooleanSpeechbankCondition("player_mounted", context -> (((NPCSpeechbankContext) context).getPlayer().getVehicle() != null))).registerCondition(EnumSpeechbankCondition.enumWithComparableExpressions("health", SpeechEnums.Health.values(), context -> SpeechEnums.Health.getHealth(((NPCSpeechbankContext) context).getNPC()))).registerCondition(EnumSpeechbankCondition.enumWithComparableExpressions("player_health", SpeechEnums.Health.values(), context -> SpeechEnums.Health.getHealth(((NPCSpeechbankContext) context).getPlayer()))).registerCondition(EnumSpeechbankCondition.enumWithComparableExpressions("player_hunger", SpeechEnums.Health.values(), context -> SpeechEnums.Health.getHealth(((NPCSpeechbankContext) context).getPlayerHungerLevel()))).registerCondition(new PersonalitySpeechbankCondition("personality", context -> ((NPCSpeechbankContext) context).getNPC().getPersonalInfo().getPersonalityTraits())).registerReplaceableVariable(new ReplaceableSpeechVariable("p", "player", context -> ((NPCSpeechbankContext) context).getPlayer().getName().getString()));

	}
}
